[build-system]
requires = ["setuptools>=68.0", "setuptools-scm>=8.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pypsa-explorer"
version = "0.1.0"
description = "Interactive dashboard for visualizing and analyzing PyPSA energy system networks"
authors = [
    {name = "Open Energy Transition", email = "info@openenergytransition.org"}
]
readme = "README.md"
license = {text = "MIT"}
keywords = ["pypsa", "energy", "visualization", "dashboard", "power-system"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Visualization",
]
requires-python = ">=3.12"
dependencies = [
    "plotly>=5.0",
    "dash>=2.14",
    "folium>=0.14",
    "mapclassify>=2.5",
    "dash-bootstrap-components>=1.5",
    "pypsa @ git+https://github.com/PyPSA/PyPSA.git@master",
    "pyyaml>=6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4",
    "pytest-cov>=4.1",
    "pytest-mock>=3.11",
    "black>=23.0",
    "ruff>=0.1",
    "mypy>=1.5",
    "pre-commit>=3.4",
    "ipython>=8.0",
    "jupyter>=1.0",
    "nbconvert>=7.0",
]
docs = [
    "sphinx>=7.0",
    "sphinx-rtd-theme>=1.3",
    "sphinx-autodoc-typehints>=1.24",
    "myst-parser>=2.0",
]
test = [
    "pytest>=7.4",
    "pytest-cov>=4.1",
    "pytest-mock>=3.11",
    "pytest-dash>=0.1",
]

[project.urls]
Homepage = "https://github.com/openenergytransition/pypsa-explorer"
Documentation = "https://pypsa-explorer.readthedocs.io"
Repository = "https://github.com/openenergytransition/pypsa-explorer"
"Bug Tracker" = "https://github.com/openenergytransition/pypsa-explorer/issues"

[project.scripts]
pypsa-explorer = "pypsa_explorer.cli:main"

[tool.setuptools]
packages = ["pypsa_explorer"]
package-dir = {"" = "src"}

[tool.setuptools.package-data]
pypsa_explorer = ["assets/*", "py.typed"]

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--cov=pypsa_explorer",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[tool.black]
line-length = 125
target-version = ['py312']
include = '\.pyi?$'

[tool.ruff]
line-length = 125
target-version = "py312"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "B905",  # zip strict
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # unused imports
"tests/*" = ["ARG", "S101"]  # pytest uses assert

[tool.ruff.isort]
known-first-party = ["pypsa_explorer"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "dash.*",
    "plotly.*",
    "folium.*",
    "pypsa.*",
]
ignore_missing_imports = true
